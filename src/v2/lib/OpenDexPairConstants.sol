// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/* Pair constants */

uint256 constant MINIMUM_LIQUIDITY = 10**3;

uint112 constant MAX_UINT_112 = 0x0000000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFF;

/* FUNCTION SELECTOR */

uint256 constant TRANSFER_SELECTOR = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;
uint256 constant BALANCE_OF_SELECTOR = 0x70a0823100000000000000000000000000000000000000000000000000000000;
uint256 constant FEE_TO_SELECTOR = 0x017e7e5800000000000000000000000000000000000000000000000000000000;

/* ERROR */

// first 4 bit keccak256("Overflow()")
bytes32 constant OVERFLOW = 0x35278d1200000000000000000000000000000000000000000000000000000000;
bytes32 constant UNDERFLOW = 0xcaccb6d900000000000000000000000000000000000000000000000000000000;
bytes32 constant INSUFFICIENT_LIQUIDITY = 0xbb55fd2700000000000000000000000000000000000000000000000000000000;
bytes32 constant INSUFFICIENT_LIQUIDITY_MINT = 0x4d2b7e1d00000000000000000000000000000000000000000000000000000000;
bytes32 constant INSUFFICIENT_LIQUIDITY_BURN = 0xb2a72af200000000000000000000000000000000000000000000000000000000;
bytes32 constant INSUFFICIENT_INPUT_AMOUNT = 0x098fb56100000000000000000000000000000000000000000000000000000000;
bytes32 constant INSUFFICIENT_OUTPUT_AMOUNT = 0x42301c2300000000000000000000000000000000000000000000000000000000;
bytes32 constant INVALID_TO = 0x290fa18800000000000000000000000000000000000000000000000000000000;
bytes32 constant INVALID_VARIABLE_K = 0x9d347b0400000000000000000000000000000000000000000000000000000000;

/* EVENT */

/* keccak256("Mint(address,uint256,uint256)") */
bytes32 constant MINT_HASH = 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f;
bytes32 constant BURN_HASH = 0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496;
bytes32 constant SWAP_HASH = 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822;
bytes32 constant SYNC_HASH = 0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1;